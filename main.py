# -*- coding: utf-8 -*-
"""Foody-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XqqSbkqzteChQinYDMWwcvDttrrA7zRC
"""

import numpy as np
import glob
import re
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation

def print_result(y_pred, y_test, clf_name):
    matrix = confusion_matrix(y_test, y_pred)
    TP, FP = matrix[0]
    FN, TN = matrix[1]
    PPV = (TP * 1.0) / (TP + FP)
    TPR = (TP * 1.0) / (TP + FN)
    TNR = (FP * 1.0) / (TN + FP)
    ACC = (TP + TN) * 1.0 / (TP + TN + FP + FN)
    F1 = 2.0 * PPV * TPR / (PPV + TPR)
    print("%s\t%.5f\t%.5f\t%.5f\t%.5f\t%.5f" %
          (clf_name, PPV, TPR, TNR, ACC, F1))

with open('train_neg.dt', 'rb') as datafile:
    train_neg = pickle.load(datafile)
with open('train_pos.dt', 'rb') as datafile:
    train_pos = pickle.load(datafile)
with open('val_neg.dt', 'rb') as datafile:
    val_neg = pickle.load(datafile)
with open('val_pos.dt', 'rb') as datafile:
    val_pos = pickle.load(datafile)
with open('test_neg.dt', 'rb') as datafile:
    test_neg = pickle.load(datafile)
with open('test_pos.dt', 'rb') as datafile:
    test_pos = pickle.load(datafile)

X_data = train_neg + train_pos + val_neg + val_pos + test_neg + test_pos

vectorizer = TfidfVectorizer(min_df=5, sublinear_tf=True)

X = vectorizer.fit_transform(X_data)

print(X.shape)

X_train = X[:30000]
X_val = X[30000:40000]
X_test = X[40000:]

y_train = [0]*15000 + [1]*15000
y_val = [0]*5000 + [1]*5000
y_test = [0]*5000 + [1]*5000

model = Sequential()
model.add(Dense(128, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dropout(0.5))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(1, activation='sigmoid'))
model.summary()
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['acc'])
model.fit(X_train, y_train, validation_data=(X_val, y_val), batch_size=64, epochs=10)
y_pred = model.predict_classes(X_test)
print_result(y_pred, y_test, 'Deep learning standard: ')

from sklearn.svm import LinearSVC

linear_svm = LinearSVC(C=1)

print(type(X_train))

linear_svm.fit(X_train, y_train)

y_pred_svm = linear_svm.predict(X_test)

print_result(y_pred_svm, y_test, 'Linear svm: ')

